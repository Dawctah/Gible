@page "/register"
@using Gible.Domain.Commands
@using Knox.Mediation
@using Knox.Security
@rendermode InteractiveServer
@inject IMediator mediator
@inject IKnoxHasher knoxHasher
@inject NavigationManager navManager

<PageTitle>Register</PageTitle>

<h3>Register as a new user:</h3>

@if(Errored)
{
    <div class="row">
        <div class="col">
            <div class="alert alert-danger">
                <p class="m-0">An error has occured: @ErrorMessage</p>
            </div>
        </div>
    </div>
}

<div class="form-row">
    <div class="col my-2">
        <InputText placeholder="First Name" class="form-control" @bind-Value="FirstName" />
    </div>
    <div class="col my-2">
        <InputText placeholder="Last Name" class="form-control" @bind-Value="LastName" />
    </div>

</div>

<div class="form-group my-2">
    <InputText placeholder="Email" class="form-control" @bind-Value="Email" id="email-input" />
    <small class="form-text">Gible does not send you emails, it is for logging in only.</small>
</div>

<div class="form-row my-2">
    <InputText placeholder="Password" class="form-control" @bind-Value="Password" />
</div>

<div class="row my-2">
    <div class="col">
        <button class="btn btn-outline-success" @onclick="RegisterUser">Sign Up</button>
    </div>
</div>


@code {
    public string FirstName { get; set; } = string.Empty;
    public string LastName { get; set; } = string.Empty;

    public string Email { get; set; } = string.Empty;
    public string Password { get; set; } = string.Empty;

    public bool Errored { get; private set; } = false;
    public string ErrorMessage { get; private set; } = string.Empty;

    public async Task RegisterUser()
    {
        try
        {
            Verify(FirstName, "First name cannot be blank");
            Verify(LastName, "Last name cannot be blank");
            Verify(Email, "Email cannot be blank");
            Verify(Password, "Password cannot be blank");

            await mediator.ExecuteCommandAsync(new RegisterUserCommand(FirstName, LastName, Email, Password));

            navManager.NavigateTo("/");
        }
        catch(Exception ex)
        {
            Errored = true;
            ErrorMessage = ex.Message;
        }
    }

    private void Verify(string value, string error)
    {
        if (string.IsNullOrEmpty(value))
        {
            throw new Exception(error);
        }
    }
}
