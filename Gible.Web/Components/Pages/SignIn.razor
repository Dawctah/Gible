@page "/sign-in"
@using Gible.Domain.Commands
@using Gible.Domain.Models
@using Gible.Domain.Queries
@using Knox.Mediation
@using Knox.Security
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@rendermode InteractiveServer
@inject IMediator Mediator
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
<PageTitle>Sign In</PageTitle>

<h3>Sign In</h3>

@if (Errored)
{
    <div class="row">
        <div class="col">
            <div class="alert alert-danger">
                <p class="m-0">An error has occured: @ErrorMessage</p>
            </div>
        </div>
    </div>
}

<div class="form-group my-2">
    <InputText placeholder="Email" class="form-control" @bind-Value="Email" id="email-input" />
</div>

<div class="form-row my-2">
    <InputText placeholder="Password" class="form-control" @bind-Value="Password" />
</div>

<div class="row my-2">
    <div class="col">
        <button class="btn btn-outline-success" @onclick="LogUserIn">Sign In</button>
    </div>
</div>

@code {
    public string Email { get; set; } = string.Empty;
    public string Password { get; set; } = string.Empty;

    public bool Errored { get; private set; } = false;
    public string ErrorMessage { get; private set; } = string.Empty;

    public async Task LogUserIn()
    {
        try
        {
            Verify(Email, "Email was not provided.");
            Verify(Password, "Password was not provided.");

            var user = await Mediator.RequestResponseAsync<GetUserByCredentialsQuery, User>(new(Email, Password));

            var claims = new List<Claim>()
            {
                new Claim(ClaimTypes.NameIdentifier, user.Key),
                new Claim(ClaimTypes.Name, user.FirstName),
                new Claim(ClaimTypes.Role, user.Role.ToString())
            };

            var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var authProperties = new Microsoft.AspNetCore.Authentication.AuthenticationProperties { };

            // HttpContextAccessor.HttpContext!.User.AddIdentity(claimsIdentity);
            HttpContextAccessor.HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(claimsIdentity), authProperties);
        }
        catch (Exception ex)
        {
            Errored = true;
            ErrorMessage = ex.Message;
        }
    }

    private void Verify(string value, string error)
    {
        if (string.IsNullOrEmpty(value))
        {
            throw new Exception(error);
        }
    }
}