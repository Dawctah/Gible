@page "/"
@rendermode InteractiveServer
@using Gible.Domain.Models
@using Knox.Mediation
@using Gible.Domain.Queries
@using Knox.Monads
@using Knox.Extensions
@inject IMediator Mediator
@inject IHttpContextAccessor ContextAccessor

<PageTitle>Home</PageTitle>

<h1>Dashboard</h1>
<p class="small">Coming soon</p>

<div class="row">
    <div class="col">
        <p>Search for recipe tags. Separate tags with a comma.</p>
    </div>
</div>
<div class="row">
    <div class="col">
        <InputText class="form-control" @bind-Value="SearchQuery"></InputText>
    </div>
    <div class="col-auto">
        <button class="btn btn-outline-primary" @onclick="@SearchRecipes">Search</button>
    </div>
</div>

@foreach (var recipe in Recipes)
{
    <a class="btn btn-link" href="/recipe/@recipe.Key">@recipe.Name</a>
}


@code{
    public IEnumerable<Recipe> Recipes { get; private set; } = [];
    public string SearchQuery { get; set; } = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        Recipes = (await Mediator.RequestResponseAsync<GetAllRecipesQuery, IEnumerable<Recipe>>(new GetAllRecipesQuery())).OrderBy(recipe => recipe.Name);
    }

    public async Task SearchRecipes()
    {
        var tags = new List<string>();
        foreach (var tag in SearchQuery.Split(","))
        {
            tags.Add(tag.Trim());
        }

        SearchQuery = string.Empty;

        Recipes = await Mediator.RequestResponseAsync<GetRecipesWithTagsQuery, IEnumerable<Recipe>>(new(tags));
    }
}