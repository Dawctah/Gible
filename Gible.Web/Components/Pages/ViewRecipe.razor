@page "/recipe/{RecipeKey}"
@rendermode InteractiveServer
@using Gible.Domain.Commands
@using Gible.Domain.Models
@using Knox.Mediation
@using Gible.Domain.Queries
@using System.Text
@inject IMediator mediator;

<h3>@Recipe.Name</h3>

<div class="row">
    <div class="col">
        <p>Enter new tags for this recipe. Multiple tags can be added by separating them with a comma.</p>
    </div>
</div>
<div class="row pb-2">
    <div class="col">
        <InputText class="form-control" @bind-Value="EnteredTags"></InputText>
    </div>
    <div class="col-auto">
        <button class="btn btn-outline-primary" @onclick="@AddTags">Add Tags</button>
    </div>
</div>

<div class="row">
    <div class="col">
        <h3>Tags</h3>
    </div>
</div>
<div class="row">
    @if (!Recipe.Tags.Any())
    {
        <p>None</p>
    }

    @foreach(var tag in Recipe.Tags)
    {
        <div class="col-2 border">
            <p class="d-flex justify-content-center my-3">@tag</p>
        </div>
    }
</div>


@foreach (var image in Recipe.Images)
{
<div class="row">
    <div class="col">
        <img src="@image" class="w-100" />
    </div>
</div>
}

@code {
    [Parameter]
    public string? RecipeKey { get; set; } = Guid.Empty.ToString();

    public Recipe Recipe { get; private set; } = Recipe.Empty;
    public string Tags
    {
        get
        {
            var result = new StringBuilder();
            foreach (var tag in Recipe.Tags)
            {
                result.Append(tag);

                if (tag != Recipe.Tags.Last())
                {
                    result.Append(", ");
                }
            }

            return result.ToString();
        }
    }

    public string EnteredTags { get; set; } = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        Recipe = await mediator.RequestResponseAsync<GetRecipeByKeyQuery, Recipe>(new GetRecipeByKeyQuery(RecipeKey!));
    }

    public async Task AddTags()
    {
        var tags = EnteredTags.Split(",");
        EnteredTags = string.Empty;
        await mediator.ExecuteCommandAsync(new UpdateRecipeTagCommand(Recipe.Key, string.Empty, tags));

        // Requery.
        await OnInitializedAsync();
    }
}

<script>

</script>